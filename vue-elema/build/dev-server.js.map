{"version":3,"sources":["../../../vue-elema/build/dev-server.js"],"names":["require","config","process","env","NODE_ENV","JSON","parse","dev","opn","path","express","webpack","proxyMiddleware","webpackConfig","port","PORT","autoOpenBrowser","proxyTable","app","appData","seller","goods","ratings","apiRoutes","Router","get","req","res","json","errno","data","use","compiler","devMiddleware","publicPath","output","quiet","hotMiddleware","log","heartbeat","plugin","compilation","cb","publish","action","forEach","context","options","target","filter","staticPath","posix","join","assetsPublicPath","assetsSubDirectory","static","uri","_resolve","readyPromise","resolve","console","waitUntilValid","server","listen","module","exports","ready","close"],"mappings":"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","file":"dev-server.js","sourcesContent":["require('./check-versions')()\n\nvar config = require('../config')\nif (!process.env.NODE_ENV) {\n  process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)\n}\n\nvar opn = require('opn')\nvar path = require('path')\nvar express = require('express')\nvar webpack = require('webpack')\nvar proxyMiddleware = require('http-proxy-middleware')\nvar webpackConfig = require('./webpack.dev.conf')\n\n// default port where dev server listens for incoming traffic\nvar port = process.env.PORT || config.dev.port\n// automatically open browser, if not set will be false\nvar autoOpenBrowser = !!config.dev.autoOpenBrowser\n// Define HTTP proxies to your custom API backend\n// https://github.com/chimurai/http-proxy-middleware\nvar proxyTable = config.dev.proxyTable\n\n//加载exoress框架，创建一个express实例\nvar app = express()\n\n//从data.json文件中提取相应的数据\nvar appData = require('../data.json');\nvar seller = appData.seller;\nvar goods = appData.goods;\nvar ratings = appData.ratings;\n//创建express的路由功能，就可以根据需求创建多个路由，需要多少创建多少\nvar  apiRoutes = express.Router();\n//使用字符串的路径模式定义请求的端点，get（）是http请求的方法，res.json（）发送一个json格式的响应\napiRoutes.get('/seller',function(req,res){\n  res.json({\n    errno:0,\n    data:seller\n  })\n})\napiRoutes.get('/goods',function(req,res){\n  res.json({\n    errno:0,\n    data:goods\n  })\n})\napiRoutes.get('/rating',function (req,res) {\n  res.json({\n    errno:0,\n    data:ratings\n  })\n})\n//api这里是做的字符串筛选，即所有包括api的字符串，第二个参数即相应的router路由\napp.use('/api',apiRoutes);\n\nvar compiler = webpack(webpackConfig)\n\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n  publicPath: webpackConfig.output.publicPath,\n  quiet: true\n})\n\nvar hotMiddleware = require('webpack-hot-middleware')(compiler, {\n  log: false,\n  heartbeat: 2000\n})\n// force page reload when html-webpack-plugin template changes\ncompiler.plugin('compilation', function (compilation) {\n  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\n    hotMiddleware.publish({ action: 'reload' })\n    cb()\n  })\n})\n\n// proxy api requests\nObject.keys(proxyTable).forEach(function (context) {\n  var options = proxyTable[context]\n  if (typeof options === 'string') {\n    options = { target: options }\n  }\n  app.use(proxyMiddleware(options.filter || context, options))\n})\n\n// handle fallback for HTML5 history API\napp.use(require('connect-history-api-fallback')())\n\n// serve webpack bundle output\napp.use(devMiddleware)\n\n// enable hot-reload and state-preserving\n// compilation error display\napp.use(hotMiddleware)\n\n// serve pure static assets\nvar staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)\napp.use(staticPath, express.static('./static'))\n\nvar uri = 'http://localhost:' + port\n\nvar _resolve\nvar readyPromise = new Promise(resolve => {\n  _resolve = resolve\n})\n\nconsole.log('> Starting dev server...')\ndevMiddleware.waitUntilValid(() => {\n  console.log('> Listening at ' + uri + '\\n')\n  // when env is testing, don't need open it\n  if (autoOpenBrowser && process.env.NODE_ENV !== 'testing') {\n    opn(uri)\n  }\n  _resolve()\n})\n\nvar server = app.listen(port)\n\nmodule.exports = {\n  ready: readyPromise,\n  close: () => {\n    server.close()\n  }\n}\n"]}